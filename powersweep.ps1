<#
.SYNOPSIS 

Powershell ping sweeper 

.PARAMETERS

ipaddress : Provide a range of IP address (CIDR Accepted) 

#>


# Main function that gets called. Requires a CIDR ip range or "-" seperated start and end IP range

function powersweep(){


    [CmdletBinding()]
    Param
    (
        [parameter(mandatory=$true,valuefrompipeline=$true,helpmessage="Example : 192.168.1.1 or 192.168.1.0/24 or 192.168.1.1-192.168.1.20")]
        [string]$ipaddress
        
    )
   
    Write-Output "IP address: $ipaddress"
   
    # Detects CIDR
    if ($ipaddress -match "\/")
    {

      
        Write-Output "CIDR detected"
        #splits it up into start and end 
        $startIP= Get-IPV4NetworkStartIP($ipaddress)
        $endIP = Get-IPV4NetworkEndIP($ipaddress)
        
    }
    # Detects range
    elseif ($ipaddress -match "\-")
    {

        Write-Output "Range Detected"
        #casts to IP address type
        $startIP=[System.Net.IPAddress]$ipaddress.Split("-")[0]
        $endIP=[System.Net.IPAddress]$ipaddress.Split("-")[1]
        
    }
        Write-Output "$startIP : $endIP"

        #calls a parallel workflow and searches for lines with ttl
        ParallelSweep -startip $startIP -endip $endIP | select-string ttl
}

# Gets the start IP from a CIDR network 

Function Get-IPV4NetworkStartIP ($strNetwork)
{
    $StrNetworkAddress = ($strNetwork.split("/"))[0]
    $NetworkIP = ([System.Net.IPAddress]$StrNetworkAddress).GetAddressBytes()
    [Array]::Reverse($NetworkIP)
    $NetworkIP = ([System.Net.IPAddress]($NetworkIP -join ".")).Address
    $StartIP = $NetworkIP +1
    #Convert To Double
    If (($StartIP.Gettype()).Name -ine "double")
    {
        $StartIP = [Convert]::ToDouble($StartIP)
    }
    $StartIP = [System.Net.IPAddress]$StartIP
    Return $StartIP
}


# Gets the end IP from a CIDR network
Function Get-IPV4NetworkEndIP ($strNetwork)
{
    $StrNetworkAddress = ($strNetwork.split("/"))[0]
    [int]$NetworkLength = ($strNetwork.split("/"))[1]
    $IPLength = 32-$NetworkLength
    $NumberOfIPs = ([System.Math]::Pow(2, $IPLength)) -1
    $NetworkIP = ([System.Net.IPAddress]$StrNetworkAddress).GetAddressBytes()
    [Array]::Reverse($NetworkIP)
    $NetworkIP = ([System.Net.IPAddress]($NetworkIP -join ".")).Address
    $EndIP = $NetworkIP + $NumberOfIPs
    If (($EndIP.Gettype()).Name -ine "double")
    {
        $EndIP = [Convert]::ToDouble($EndIP)

    }
    $EndIP = [System.Net.IPAddress]$EndIP
    Return $EndIP
}



# Gets start and end network addresses (not including host octet)
Function Get-network($startip ,$endip)
{

    $network_s = @()
    $network_e = @()

    $startaddr = $startip.IPAddressToString
    $endaddr = $endip.IPAddressToString

   # $octets_s=@()
   # $octets_e=@()

    $octets_s = $startaddr.Split("{.}")

    $octets_e = $endaddr.Split("{.}")

    $startnum = $startaddr.Split("{.}")[3]
    $endnum = $endaddr.Split("{.}")[3]

   # Write-Output $octets_s

    for($i=0;$i -lt 3;$i++){
        
        $network_s += $octets_s[$i]+"."
        $network_e += $octets_e[$i]+"."
    }
    
    return $network_s ,$network_e
}




# USELESS 
# gets a list of subnets 
# - not really. Im keeping it incase i realise what i was trying to do 
<#
Function Get-subnets($startip,$endip)
{

    $startaddr=$startip.IPAddressToString
    $endaddr=$endip.IPAddressToString
   
    $out = "False"

    $subnets=@()

    if($startaddr -le $endaddr){
        for($i=0;$i -lt 4;$i++)
        {
            for($k=0;$k -lt 4;$k++)
            {
            
                if($startaddr[$i] -lt $endaddr[$k])
                {
                    $subnets+=$startaddr    
                }
            
            }
        
        }
    
    }
    else
    {
        $out = "no"
    }
    return $subnets

}
#>

# Work flow to ping ip addresses 
workflow ParallelSweep
{ 

    Param(
        [System.Net.IPAddress]$startip,
        [System.Net.IPAddress]$endip
    
    )

    #$subnets=Get-subnets $startip $endip
    
    #Write-Output $subnets

    $network_sub= Get-network -startip $startip -endip $endip 
    
    $network_start = $network_sub[0]
    $network_end = $network_sub[1]

    $endaddr = $endip.IPAddressToString
    $endhost = $endaddr.Split("{.}")[3]

    
    #$network = $subnets[0]+$subnets[1]+$subnets[2]
    #Write-Output $network

    

    foreach -parallel -throttlelimit 4 ($i in 0..$endhost)
    
    {
        $newnet = $network_start+$i -join "" 
        ping -n 1 -w 100 $newnet

        if ($network_start -ne $network_end)
        {
            
            $endnet = $network_end+$i -join ""
            ping -n 1 -w 100 $endnet

        }
        }
      
 }

powersweep -ipaddress 192.168.1.0-192.168.1.40